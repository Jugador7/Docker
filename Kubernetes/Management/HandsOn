Build and push application image to IBM Cloud Container Registry
Export your namespace as an environment variable so that it can be used in subsequent commands.
1
export MY_NAMESPACE=sn-labs-$USERNAME
Copied!


Use the Explorer to view the Dockerfile that will be used to build an image.


Build and push the image again, as it may have been deleted automatically since you completed the first lab.

1
docker build -t us.icr.io/$MY_NAMESPACE/hello-world:1 . && docker push us.icr.io/$MY_NAMESPACE/hello-world:1
Copied!

Deploy the application to Kubernetes
Use the Explorer to edit deployment.yaml in this directory. The path to this file is CC201/labs/3_K8sScaleAndUpdate/. You need to insert your namespace where it says <my_namespace>. Make sure to save the file when you’re done.
NOTE: To know your namespace, run echo $MY_NAMESPACE in the terminal










Run your image as a Deployment.
1
kubectl apply -f deployment.yaml
Copied!


NOTE: If you have tried this lab earlier, there might be a possibility that the previous session is still persistent. In such a case, you will see an ‘Unchanged’ message instead of the ‘Created’ message in the above output. We would recommend you to continue with the further steps of the lab.

List Pods until the status is “Running”.
1
kubectl get pods
Copied!


NOTE: Please move to the next step only after you see the pod status as ‘Running’. In case you see ‘Container Creating’ as the output, please re-run the command in a few minutes.

In order to access the application, we have to expose it to the internet via a Kubernetes Service.
1
kubectl expose deployment/hello-world
Copied!
This creates a service of type ClusterIP.



Open a new terminal window using Terminal > New Terminal.
NOTE: Do not close the terminal window you were working on.



Cluster IPs are only accesible within the cluster. To make this externally accessible, we will create a proxy.
Note: This is not how you would make an application externally accessible in a production scenario.

Run this command in the new terminal window since your environment variables need to be accessible in the original window for subsequent commands.

1
kubectl proxy
Copied!


This command will continue running until it exits. Keep it running so that you can continue to access your app.

Go back to your original terminal window, ping the application to get a response.
NOTE: Do not close the terminal window where the proxy command is still running.

1
curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy
Copied!
Observe the message “Hello world from hello-world-xxxxxxxx-xxxx. Your app is up and running!











Perform rolling updates
Rolling updates are an easy way to update our application in an automated and controlled fashion. To simulate an update, let’s first build a new version of our application and push it to Container Registry.

Use the Explorer to edit app.js. The path to this file is CC201/labs/3_K8sScaleAndUpdate/. Change the welcome message from 'Hello world from ' + hostname + '! Your app is up and running!\n' to 'Welcome to ' + hostname + '! Your app is up and running!\n'. Make sure to save the file when you’re done.


Build and push this new version to Container Registry. Update the tag to indicate that this is a second version of this application. Make sure to use the terminal window that isn’t running the proxy command.

NOTE: Do not close the terminal that is running the proxy command

1
docker build -t us.icr.io/$MY_NAMESPACE/hello-world:2 . && docker push us.icr.io/$MY_NAMESPACE/hello-world:2
Copied!


List images in Container Registry to see all the different versions of this application that you have pushed so far.
1
ibmcloud cr images
Copied!


Ensure that the new image shows No Issues, else re-run the image several times till there are no issues.

Update the deployment to use this version instead.
1
kubectl set image deployment/hello-world hello-world=us.icr.io/$MY_NAMESPACE/hello-world:2
Copied!


Get a status of the rolling update by using the following command:
1
kubectl rollout status deployment/hello-world
Copied!


You can also get the Deployment with the wide option to see that the new tag is used for the image.
1
kubectl get deployments -o wide
Copied!


Look for the IMAGES column and ensure that the tag is 2.

Ping your application to ensure that the new welcome message is displayed.
1
curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy
Copied!


It’s possible that a new version of an application contains a bug. In that case, Kubernetes can roll back the Deployment like this:
1
kubectl rollout undo deployment/hello-world
Copied!


Get a status of the rolling update by using the following command:
1
kubectl rollout status deployment/hello-world
Copied!


Get the Deployment with the wide option to see that the old tag is used.
1
kubectl get deployments -o wide
Copied!


Look for the IMAGES column and ensure that the tag is 1.

Ping your application to ensure that the earlier ‘Hello World..Your app is up & running!‘ message is displayed.
1
curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy
Copied!





















Using a ConfigMap to store configuration
ConfigMaps and Secrets are used to store configuration information separate from the code so that nothing is hardcoded. It also lets the application pick up configuration changes without needing to be redeployed. To demonstrate this, we’ll store the application’s message in a ConfigMap so that the message can be updated simply by updating the ConfigMap.

Create a ConfigMap that contains a new message.
1
kubectl create configmap app-config --from-literal=MESSAGE="This message came from a ConfigMap!"
Copied!


NOTE: If you have tried this lab earlier, there might be a possibility that the previous session is still persistent. In such a case, you will see an ‘error: failed to create configmap: configmaps “app-config” already exists’ message, instead of the ‘Created’ message as below. We would recommend you to continue with the further steps of the lab.



Use the Explorer to edit deployment-configmap-env-var.yaml. The path to this file is CC201/labs/3_K8sScaleAndUpdate/. You need to insert your namespace where it says <my_namespace>. Make sure to save the file when you’re done.


In the same file, notice the section reproduced below. The bottom portion indicates that environment variables should be defined in the container from the data in a ConfigMap named app-config.

1
2
3
4
5
6
7
8
containers:
- name: hello-world
  image: us.icr.io/<my_namespace>/hello-world:3
  ports:
  - containerPort: 8080
  envFrom:
  - configMapRef:
    name: app-config
Copied!
Use the Explorer to open the app.js file. The path to this file is CC201/labs/3_K8sScaleAndUpdate/. Find the line that says, res.send('Welcome to ' + hostname + '! Your app is up and running!\n').
Edit this line to look like the following:

1
res.send(process.env.MESSAGE + '\n')
Copied!


Make sure to save the file when you’re done. This change indicates that requests to the app will return the environment variable MESSAGE.

Build and push a new image that contains your new application code.
1
docker build -t us.icr.io/$MY_NAMESPACE/hello-world:3 . && docker push us.icr.io/$MY_NAMESPACE/hello-world:3
Copied!


The deployment-configmap-env-var.yaml file is already configured to use the tag 3.

Apply the new Deployment configuration.
1
kubectl apply -f deployment-configmap-env-var.yaml
Copied!


Ping your application again to see if the message from the environment variable is returned.
NOTE: You can run this command again. As it may not show the "This message came from a ConfigMap!" message right away.

1
curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy
Copied!


If you see the message, “This message came from a ConfigMap!”, then great job!

NOTE: If your previous session is still persisting, you might see the below output. If so, we would recommend you to move to the further steps of the lab.



Because the configuration is separate from the code, the message can be changed without rebuilding the image. Using the following command, delete the old ConfigMap and create a new one with the same name but a different message.
1
kubectl delete configmap app-config && kubectl create configmap app-config --from-literal=MESSAGE="This message is different, and you didn't have to rebuild the image!"
Copied!


Restart the Deployment so that the containers restart. This is necessary since the environment variables are set at start time.
1
kubectl rollout restart deployment hello-world
Copied!


Ping your application again to see if the new message from the environment variable is returned.
1
curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy


Autoscale the hello-world application using Horizontal Pod Autoscaler
Please add the following section to the deployment.yaml file under the template.spec.containers section for increasing the CPU resource utilization
1
2
3
4
5
6
          name: http
        resources:
          limits:
            cpu: 50m
          requests:
            cpu: 20m
Copied!
Note: After making the changes, do not forget to save the file.

The updated file will be as below:



Apply the deployment:
1
kubectl apply -f deployment.yaml
Copied!


Autoscale the hello-world deployment using the below command:
1
kubectl autoscale deployment hello-world --cpu-percent=5 --min=1 --max=10
Copied!


You can check the current status of the newly-made HorizontalPodAutoscaler, by running:
1
kubectl get hpa hello-world
Copied!


Please ensure that the kubernetes proxy is still running in the 2nd terminal. If it is not, please start it again by running:
1
kubectl proxy
Copied!
Open another new terminal and enter the below command to spam the app with multiple requests for increasing the load:
1
for i in `seq 100000`; do curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/hello-world/proxy; done
Copied!


Continue further commands in the 1st terminal

Run the below command to observe the replicas increase in accordance with the autoscaling:
1
kubectl get hpa hello-world --watch
Copied!


You will see an increase in the number of replicas which shows that your application has been autoscaled.

Stop this command by pressing CTRL + C.

Run the below command to observe the details of the horizontal pod autoscaler:
1
kubectl get hpa hello-world
Copied!


You will notice that the number of replicas has increased now.

Stop the proxy and the load generation commands running in the other 2 terminal by pressing CTRL + C.

Delete the Deployment.

1
kubectl delete deployment hello-world
Copied!


Delete the Service.
1
kubectl delete service hello-world
Copied!


Congratulations! You have completed the lab for the third module of this course.













