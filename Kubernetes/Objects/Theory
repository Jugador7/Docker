Object:  A bundle of software that has an identity, a state and a behavior(variables,
data structures and specific functions)

Entity: a person, place or thing with an identity and associated data. 

Persisten: Lasts despite downtime

Kubernetes objects are persistent entities.
(Pods, Namespaces, ReplicaSets and Deplyments)

Objects consist of two main fields
Object spect: Provided by user and defines desired state
Status: Provided by kubernetes and defines current state

To work with objects you can use the KubernetesAPI directly with the client libraries,
the kubectl command-line interface or both

Labels and selectors:
- Labeles are key-value pairs to identify an object. 
- Selectors are the core grouping method of kubernetes and help you identify and group a set of objects.

Namespaces and names:
- Namespaces: mechanism for isolating groups of resources within a single cluster 
for example team, project, etc. 
- Necessary with larger numbers of users.

Namespaces provide a scope for object names:
- Each object has a name
- Names are unique for a resource type within a namespace

Pods:
Simplest unit in kubernetes
Represents processes running in your cluster
Encapsulates one or more containers
Replicating a pod servers to scale applications horizontally
Pods have apiVersion, kind, metadata, specs(containers: name, image and ports)

ReplicaSet:
- Set of horizontally scaled running Pods. 
- Configuration file that defines: Number of replicas, pod template, selector(matches the pod template label)
- Created and managed by deployments

Deployment:
- Provides updates for Pods and ReplicaSets
- Run multiple replicas of an application
- Suitable for stateless applications. 
- Has a selector defines which pods can be acquired
- Update triggers a rollout

Service:
- REST object, like Pods
- Is a logical abstraction for a set of Pods in a cluster
- Provides policies for accessing the Pods and cluster
- Every service has an IP and multiple protocls such as TCP,. UDP and other
- The port number with the sanme name can vary in each backend Pod
- Can have an opttional selector
- Optionally maps incoming ports to a targetPort
- Services are needed because Pods in a cluster are volatile
- This volatilty leads to discoverability issyes because of changing IP addresses. 
- A Service keeps track of the changes and exposes a single IP address or a DNS name
A servie utilizes selectors to target a set of pods

Native Kubernetes applications
- Update API endpoints when there are changes in the Pods of a Service

Non-native Kubernetes applications
-use a virtual-IP-based bridge or load balancer between the applications and the backend Pods. 

4 Types of services:
ClusterIP: 
- Makes the service only accesible within the cluster. 

NodePort:
- Creates and routes requests to the Cluster IP service
- Exposes the service on each node0s IP address at a static port. 
- Extensiuon of cluster IP
- Exposes a service with no load balancing

LoadBalancer:
- Extension of the nodePort Service, an external Load Balancer or ELB, creates nodePort and ClusterIP services automatically. 
- Directs service to nodePortService. 
- To expose a service to the internet you need a new ELB with an IP address
- Use a cloud provider's ELB to host your cluster. 

ExternalName:
- Maps toi a DNS name. 
Requires a paramerter spect. externalName
- Returns a CNMAE record and its value
- Used to create a service that represents an external storage and enable pods from different namespace to talk to each other. 

Ingress_
- API OBjewct that provides routing roles to multiples users. 
- Por 80 para HTTP y 443 pra HTTPS
- An ELB is expensive and is managed outside the cluster while the cluster monitors ingress. 

DaemonSet
- bject that makes sure that nodes run a copy of a pod
- As nodews are added to a cluster, pods are added to the nodes. 
- Pods are garbage collected when removed froma a cluster. - Ideally used for storage, logs. 

StatefulSet:
Object that manages statefull apps. 
Manages deployment and scaling of pods. 
provides guarantiees about the order and uniqueness of pods
Maintains a sticky identity and provides persistence storage volumens

Job:
-Creates pods and tracjs its completion. 
-Jobs are retried until completed
-Deleting a job will remove the created pods. 
-Suspending a job will delete active pods. 
-A job can run several pods in parallel
- a CronJob: Jobs on iterative schedule. 





