Clone the git repository that contains the artifacts needed for this lab.
1
[ ! -d 'guestbook' ] && git clone https://github.com/ibm-developer-skills-network/guestbook
Copied!


Change to the directory for this lab.
1
cd guestbook
Copied!
List the contents of this directory to see the artifacts for this lab.
1
ls















Build the guestbook app
To begin, we will build and deploy the web front end for the guestbook app.

Change to the v1/guestbook directory.
1
cd v1/guestbook
Copied!
Dockerfile incorporates a more advanced strategy called multi-stage builds, so feel free to read more about that here.
Complete the Dockerfile with the necessary Docker commands to build and push your image. The path to this file is guestbook/v1/guestbook/Dockerfile.

# Please choose from the below set of Docker commands to complete your Dockerfile:

# COPY
# RUN
# ADD
# EXPOSE
# FROM
# CMD
# PUSH
# PULL
# WORKDIR


FROM golang:1.18 as builder

WORKDIR /app

COPY main.go .

RUN go mod init guestbook
RUN go mod tidy

RUN go build -o main main.go

FROM ubuntu:18.04

COPY --from=builder /app/main /app/guestbook

ADD public/index.html /app/public/index.html
ADD public/script.js /app/public/script.js
ADD public/style.css /app/public/style.css
ADD public/jquery.min.js /app/public/jquery.min.js

WORKDIR /app

CMD ["./guestbook"]
EXPOSE 3000

Hint!
Copy the code of the completed dockerfile with you. You will be prompted to submit it in the text box in the Peer Assignment.

Export your namespace as an environment variable so that it can be used in subsequent commands.
1
export MY_NAMESPACE=sn-labs-moyagabriel1
Copied


Build the guestbook app using the Docker Build command.
Hint!
docker build . -t us.icr.io/$MY_NAMESPACE/guestbook:v1


Push the image to IBM Cloud Container Registry.
docker push us.icr.io/$MY_NAMESPACE/guestbook:v1
Hint!
Note: If you have tried this lab earlier, there might be a possibility that the previous session is still persistent. In such a case, you will see a ‚ÄòLayer already Exists‚Äô message instead of the ‚ÄòPushed‚Äô message in the above output. 
We recommend you to proceed with the next steps of the lab.

Verify that the image was pushed successfully.
1
ibmcloud cr images
Copied!


üì∑ Take a screenshot of the output of Step 6 and save it as a .jpg or .png with the filename crimages.png. You will be prompted to upload the screenshot in the Peer Assignment.

Open the deployment.yml file in the v1/guestbook directory & view the code for the deployment of the application:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: guestbook
  labels:
    app: guestbook
spec:
  replicas: 1
  selector:
    matchLabels:
      app: guestbook
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: guestbook
    spec:
      containers:
      - image: us.icr.io/sn-labs-moyagabriel1/guestbook:v1
        imagePullPolicy: Always
        name: guestbook
        ports:
        - containerPort: 3000
          name: http
        resources:
          limits:
            cpu: 50m
          requests:
            cpu: 20m
Copied!
Note: Replace <your sn labs namespace> with your SN labs namespace. To check your SN labs namespace, please run the command ibmcloud cr namespaces

It should look as below:


Apply the deployment using:
1
kubectl apply -f deployment.yml
Copied!


Open a New Terminal and enter the below command to view your application:
1
kubectl port-forward deployment.apps/guestbook 3000:3000
Copied!


Launch your application on port 3000. Click on the Skills Network button on the right, it will open the ‚ÄúSkills Network Toolbox‚Äù. Then click the Other then Launch Application. From there you should be able to enter the port and launch.


Now you should be able to see your running application. Please copy the app URL which will be given as below:


üì∑ Take a screenshot of your deployed application and save it as a .jpg or .png with the filename app.png. You will be prompted to upload the screenshot in the Peer Assignment.

Try out the guestbook by putting in a few entries. You should see them appear above the input box after you hit Submit.

























Autoscale the Guestbook application using Horizontal Pod Autoscaler
Autoscale the Guestbook deployment using kubectl autoscale deployment
Hint!
1
kubectl autoscale deployment guestbook --cpu-percent=5 --min=1 --max=10
Copied!


You can check the current status of the newly-made HorizontalPodAutoscaler, by running:
1
kubectl get hpa guestbook
Copied!
The current replicas is 0 as there is no load on the server.

üì∑ Take a screenshot of your Horizontal Pod Autoscaler and save it as a .jpg or .png with the filename hpa.png. You will be prompted to upload the screenshot in the Peer Assignment.

Open another new terminal and enter the below command to generate load on the app to observe the autoscaling (Please ensure your port-forward command is running. In case you have stopped your application, please run the port-forward command to re-run the application at port 3000.)
1
kubectl run -i --tty load-generator --rm --image=busybox:1.36.0 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- <your app URL>; done"
Copied!
Please replace your app URL in the <your app URL> part of the above command.
Note: Use the same copied URL which you obtained in step 11 of the previous task.

The command will be as below:



Note: In case you get a Load generator already exists error, please suffix a number after load-generator eg. load-generator-1, load-generator-2.

You will keep getting an output similar as below which will indicate the increasing load on the app:


Note: Continue further commands in the 1st terminal

Run the below command to observe the replicas increase in accordance with the autoscaling:
1
kubectl get hpa guestbook --watch
Copied!


Run the above command again after 5-10 minutes and you will see an increase in the number of replicas which shows that your application has been autoscaled.


üì∑ Take a screenshot of your Autoscaler details and save it as a .jpg or .png with the filename hpa2.png. You will be prompted to upload the screenshot in the Peer Assignment.

Run the below command to observe the details of the horizontal pod autoscaler:
1
kubectl get hpa guestbook
Copied!


Please close the other terminals where load generator and port-forward commands are running.





























